function Option(res_fn, error)
{
    if(typeof res_fn === 'function')
    {
        try 
        {
            this.res = res_fn()
            if( this.res instanceof Option )
                return this.res;
        }
        catch(er){
            this.err = er.message
        }
    }
    else {
        this.res = res_fn;
        this.err = error;
    }
    return this;
}

Option.of = (res,er) => new Option(res, er)

Option.result = (res) => new Option(res)

Option.error = (er) => new Option(undefined, er)

Option.prototype.isSome = () => this.res !== undefined

Option.prototype.error = (fn) => {
    if(fn) {
        this.err && fn(this.err)
        return this;
    }
    return this.err;
}

Option.prototype.success = (fn) => {
    this.isSome() && fn(this.res)
    return this
}

Option.prototype.map = (fn) => {
    var res = this.res;
    return this.isSome() ? Option.of( () => fn(res) ) : this
}

Option.prototype.orElse = (other) => this.isSome() ? this.res : other



exports.Option = Option


// Example of using
// var fn1 = () => { throw new Error('Ошибка') }
// var fn2 = (it) => it.length

// var ll = Option.of(fn1).map(fn2).error( (err) => console.log(err) ).orElse(1)
// console.log(ll)


